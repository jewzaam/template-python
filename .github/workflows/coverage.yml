# Generated-by: Cursor (claude-4-sonnet)
name: Coverage Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up environment and dependencies
      run: make requirements-dev
    
    - name: Generate coverage report
      run: make coverage-report
    
    - name: Extract coverage data and set badge info
      if: always()
      run: |
        COVERAGE=$(cat .coverage-percentage)
        THRESHOLD=$(grep "COVERAGE_THRESHOLD" make/common.mk | cut -d'=' -f2 | tr -d ' ')
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "THRESHOLD=$THRESHOLD" >> $GITHUB_ENV
        
        # Determine status for badge and PR comment
        if [ "$(echo "$COVERAGE" | cut -d. -f1)" -lt "$THRESHOLD" ]; then
          echo "COVERAGE_STATUS=failed" >> $GITHUB_ENV
          echo "BADGE_COLOR=red" >> $GITHUB_ENV
        else
          echo "COVERAGE_STATUS=passed" >> $GITHUB_ENV
          echo "BADGE_COLOR=green" >> $GITHUB_ENV
        fi
    
    - name: Update coverage badge and comment on PR
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = process.env.COVERAGE;
          const status = process.env.COVERAGE_STATUS;
          const threshold = process.env.THRESHOLD;
          const badgeColor = process.env.BADGE_COLOR;
          
          const statusIcon = status === 'passed' ? '✅' : '❌';
          const statusText = status === 'passed' ? 'PASSED' : 'FAILED';
          
          const comment = `## ${statusIcon} Code Coverage Check ${statusText}
          
          ![Coverage Badge](https://img.shields.io/badge/coverage-${coverage}%25-${badgeColor})
          
          **Current Coverage:** ${coverage}%
          **Required Threshold:** ${threshold}%
          **Status:** ${status === 'passed' ? `Coverage meets the minimum requirement` : `Coverage is below the required threshold`}
          
          ${status === 'failed' ? `⚠️ **This PR cannot be merged until coverage reaches at least ${threshold}%**` : ''}
          
          ---
          *Coverage report generated by [coverage.py](https://coverage.readthedocs.io/)*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Verify coverage threshold (final pass/fail)
      run: make coverage-verify